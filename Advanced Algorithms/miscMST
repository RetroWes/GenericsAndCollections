import java.util.*;

// Outer class to manage the Minimum Spanning Tree operations
public class MST {
  private int vertices;
  private List<Edge> edges;

  // Constructor to initialize the graph
  public MST(int vertices) {
    this.vertices = vertices;
    this.edges = new ArrayList<Edge>();
  }

  // Method to add an edge to the graph
  public void addEdge(int src, int dest, int weight) {
    edges.add(new Edge(src, dest, weight));
  }

  // Inner class to represent an edge in the graph with comparable functionality
  // for sorting
  class Edge implements Comparable<Edge> {
    int source, destination, weight;

    Edge(int source, int destination, int weight) {
      this.source = source;
      this.destination = destination;
      this.weight = weight;
    }

    public int compareTo(Edge compareEdge) {
      return this.weight - compareEdge.weight;
    }
  }

  // Inner class to represent subsets for the union-find algorithm
  class Subset {
    int parent, rank;

    Subset(int parent, int rank) {
      this.parent = parent;
      this.rank = rank;
    }
  }

  // Method to find the root of the subset
  private int find(Subset[] subsets, int i) {
    if (subsets[i].parent != i) {
      subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
  }

  // Method to union two subsets
  private void union(Subset[] subsets, int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank) {
      subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
      subsets[yroot].parent = xroot;
    } else {
      subsets[yroot].parent = xroot;
      subsets[xroot].rank++;
    }
  }

  // Main function to construct MST using Kruskal's algorithm
  public void KruskalMST() {
    List<Edge> result = new ArrayList<Edge>();
    Collections.sort(edges);

    Subset[] subsets = new Subset[vertices];
    for (int vertex = 0; vertex < vertices; ++vertex) {
      subsets[vertex] = new Subset(vertex, 0);
    }

    int i = 0;
    while (result.size() < vertices - 1 && i < edges.size()) {
      Edge next_edge = edges.get(i++);

      int x = find(subsets, next_edge.source);
      int y = find(subsets, next_edge.destination);

      if (x != y) {
        result.add(next_edge);
        union(subsets, x, y);
      }
    }

    for (Edge edge : result) {
      System.out.printf("%d -- %d == %d%n", edge.source, edge.destination, edge.weight);
    }
  }

  // Main method to test the MST algorithm
  public static void main(String[] args) {
    MST graph = new MST(5);
    graph.addEdge(0, 1, 4);
    graph.addEdge(0, 2, 3);
    graph.addEdge(1, 2, 1);
    graph.addEdge(1, 3, 2);
    graph.addEdge(2, 3, 4);
    graph.addEdge(3, 4, 2);
    graph.addEdge(4, 0, 4);

    graph.KruskalMST();
  }
}