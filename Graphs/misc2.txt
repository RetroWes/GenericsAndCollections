public void BFSSearch(int val){
//     Queue<Node> nodeQueue = new LinkedList<Node>();            // A queue of nodes.
//     Queue<PairBox> tempQueue = new LinkedList<PairBox>();            // A second queue of nodes.
//     List<PairBox> visitedNodes = new LinkedList<PairBox>();
//     nodeQueue.add(this.startingNode);                          // Initializes the queue with the starting node.
//     System.out.println("Path:");
//     System.out.println(startingNode.value);
//     visitedNodes.add(startingNode);
//     if(startingNode.value == val) {
//       System.out.println("Value " + val + " found at starting node.");
//       return;
//     }

//     while(!nodeQueue.isEmpty()){                                  // Runs until {nodeQueue} is empty.
//         List<PairBox> tempList = nodeQueue.poll().getAdjacents(); // Returns the adjacent nodes of the queue's head node as a list.
//         for(PairBox pair : tempList) {tempQueue.add(pair);}       // Adds all of the nodes in the list to {tempQueue}.

//         PairBox nodeBeingCompared = tempQueue.poll();             // The node in {tempQueue} whose value is being compared to the value being searched for.
//         while(nodeBeingCompared != null){                      // While {tempQueue} still has nodes to check...
//         System.out.println(nodeBeingCompared.getNode().value);

//         if(nodeBeingCompared.getNode().value == val) {               // If this node's value is equal to the value being searched for, return.
//           System.out.println("Value " + nodeBeingCompared.getNode().value + " found.");
//           return;
//         }
//         visitedNodes.add(nodeBeingCompared.getNode().value);
//         tempList = nodeBeingCompared.getAdjacents();       // Otherwise, grab this node's adjacency list-

//         for(Node node : tempList) {                        // And add them to the end of {tempQueue}.
//           if(!visitedNodes.contains(node)){
//             tempQueue.add(node);
//           }
//         }
//         nodeBeingCompared = tempQueue.poll();              // Set {nodeBeingCompared} to as the next node to be run through this process.
//       }
//     }
//     System.out.println("Value not found in the graph.");
// }